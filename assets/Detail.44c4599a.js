import{T as c,H as r}from"./components.8e31d27d.js";import"./vue3-code-block.es.448c4cc3.js";import{_ as l}from"./_plugin-vue_export-helper.c27b6911.js";import{m as d,o as p,c as h,b as s,w as o,d as u,F as _,p as f,e as m,a as e}from"./entry.6f1574b4.js";import"./vue.f36acd1f.6242cf0e.js";import"./_commonjsHelpers.725317a4.js";const i=t=>(f("data-v-d3d4e78e"),t=t(),m(),t),v=i(()=>e("p",{class:"font-bold text-xl mb-2 text-gray-700"},"Keep in mind:",-1)),b=i(()=>e("ul",{class:"text-gray-700 text-base"},[e("li",null," If the combobox is collapsed and the user types printable characters, the listbox is displayed and receives accessibility focus via aria-activedescendant. This enables users to perceive the presence of the options, and enables assistive technology users to comprehend the size of the list of options. "),e("li",null," Navigating the list of options does not set the value of the input. This gives screen reader users, who need to navigate among the options to perceive them, the ability to explore options without losing the current value of the input. The value is set when users press Space, Enter, or Tab, or when focus moves out of the combobox. The current value is retained if the listbox is closed with Escape or if the user collapses the list by clicking the input. "),e("li",null," Browsers do not manage visibility of elements referenced by aria-activedescendant like they do for elements with focus. When a keyboard event changes the active option in the listbox, the JavaScript scrolls the option referenced by aria-activedescendant into view. Managing aria-activedescendant visibility is essential to accessibility for people who use a browser's zoom feature to increase the size of content. ")],-1)),x={__name:"Detail",setup(t){return d(""),(y,g)=>{const a=c,n=r;return p(),h(_,null,[s(n,null,{default:o(()=>[s(a,null,{default:o(()=>[u("Checkbox - Criteria")]),_:1})]),_:1}),v,b],64)}}},N=l(x,[["__scopeId","data-v-d3d4e78e"]]);export{N as default};
